///
/// @Generated by Mockolo
///

import BackgroundTasks
import Combine
import CommonCrypto
import CoreBluetooth
import CryptoKit
@testable import ENCore
import ENFoundation
import ExposureNotification
import Foundation
import Lottie
import MessageUI
import NotificationCenter
import Security
import SnapKit
import UIKit
import UserNotifications
import WebKit

class InfectedViewControllableMock: InfectedViewControllable {
    init() {}
    init(router: InfectedRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var thankYouWantsDismissalCallCount = 0
    var thankYouWantsDismissalHandler: (() -> ())?
    func thankYouWantsDismissal() {
        thankYouWantsDismissalCallCount += 1
        if let thankYouWantsDismissalHandler = thankYouWantsDismissalHandler {
            thankYouWantsDismissalHandler()
        }
    }

    var routerSetCallCount = 0
    var router: InfectedRouting? { didSet { routerSetCallCount += 1 } }

    var pushCallCount = 0
    var pushHandler: ((ViewControllable) -> ())?
    func push(viewController: ViewControllable) {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(viewController)
        }
    }

    var setCallCount = 0
    var setHandler: ((ViewControllable?) -> ())?
    func set(cardViewController: ViewControllable?) {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(cardViewController)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class RootRoutingMock: RootRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToOnboardingCallCount = 0
    var routeToOnboardingHandler: (() -> ())?
    func routeToOnboarding() {
        routeToOnboardingCallCount += 1
        if let routeToOnboardingHandler = routeToOnboardingHandler {
            routeToOnboardingHandler()
        }
    }

    var detachOnboardingAndRouteToMainCallCount = 0
    var detachOnboardingAndRouteToMainHandler: ((Bool) -> ())?
    func detachOnboardingAndRouteToMain(animated: Bool) {
        detachOnboardingAndRouteToMainCallCount += 1
        if let detachOnboardingAndRouteToMainHandler = detachOnboardingAndRouteToMainHandler {
            detachOnboardingAndRouteToMainHandler(animated)
        }
    }

    var routeToMessageCallCount = 0
    var routeToMessageHandler: ((String, String) -> ())?
    func routeToMessage(title: String, body: String) {
        routeToMessageCallCount += 1
        if let routeToMessageHandler = routeToMessageHandler {
            routeToMessageHandler(title, body)
        }
    }

    var detachMessageCallCount = 0
    var detachMessageHandler: ((Bool) -> ())?
    func detachMessage(shouldDismissViewController: Bool) {
        detachMessageCallCount += 1
        if let detachMessageHandler = detachMessageHandler {
            detachMessageHandler(shouldDismissViewController)
        }
    }

    var detachCallGGDCallCount = 0
    var detachCallGGDHandler: ((Bool) -> ())?
    func detachCallGGD(shouldDismissViewController: Bool) {
        detachCallGGDCallCount += 1
        if let detachCallGGDHandler = detachCallGGDHandler {
            detachCallGGDHandler(shouldDismissViewController)
        }
    }

    var routeToUpdateAppCallCount = 0
    var routeToUpdateAppHandler: ((Bool, String?, String?) -> ())?
    func routeToUpdateApp(animated: Bool, appStoreURL: String?, minimumVersionMessage: String?) {
        routeToUpdateAppCallCount += 1
        if let routeToUpdateAppHandler = routeToUpdateAppHandler {
            routeToUpdateAppHandler(animated, appStoreURL, minimumVersionMessage)
        }
    }
}

class StatusViewControllableMock: StatusViewControllable {
    init() {}
    init(router: StatusRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var routerSetCallCount = 0
    var router: StatusRouting? { didSet { routerSetCallCount += 1 } }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ViewControllableMock: ViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class CardViewControllableMock: CardViewControllable {
    init() {}
    init(router: CardRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var enableSettingRequestsDismissCallCount = 0
    var enableSettingRequestsDismissHandler: ((Bool) -> ())?
    func enableSettingRequestsDismiss(shouldDismissViewController: Bool) {
        enableSettingRequestsDismissCallCount += 1
        if let enableSettingRequestsDismissHandler = enableSettingRequestsDismissHandler {
            enableSettingRequestsDismissHandler(shouldDismissViewController)
        }
    }

    var routerSetCallCount = 0
    var router: CardRouting? { didSet { routerSetCallCount += 1 } }

    var updateCallCount = 0
    var updateHandler: ((CardType) -> ())?
    func update(cardType: CardType) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(cardType)
        }
    }

    var enableSettingDidTriggerActionCallCount = 0
    var enableSettingDidTriggerActionHandler: (() -> ())?
    func enableSettingDidTriggerAction() {
        enableSettingDidTriggerActionCallCount += 1
        if let enableSettingDidTriggerActionHandler = enableSettingDidTriggerActionHandler {
            enableSettingDidTriggerActionHandler()
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable) -> ())?
    func present(viewController: ViewControllable) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController)
        }
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable) -> ())?
    func dismiss(viewController: ViewControllable) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ExposureConfigurationMock: ExposureConfiguration {
    init() {}
    init(minimumRiskScope: UInt8 = 0, attenuationLevelValues: [UInt8] = [UInt8](), daysSinceLastExposureLevelValues: [UInt8] = [UInt8](), durationLevelValues: [UInt8] = [UInt8](), transmissionRiskLevelValues: [UInt8] = [UInt8](), attenuationDurationThresholds: [Int] = [Int]()) {
        self.minimumRiskScope = minimumRiskScope
        self.attenuationLevelValues = attenuationLevelValues
        self.daysSinceLastExposureLevelValues = daysSinceLastExposureLevelValues
        self.durationLevelValues = durationLevelValues
        self.transmissionRiskLevelValues = transmissionRiskLevelValues
        self.attenuationDurationThresholds = attenuationDurationThresholds
    }

    var minimumRiskScopeSetCallCount = 0
    var minimumRiskScope: UInt8 = 0 { didSet { minimumRiskScopeSetCallCount += 1 } }

    var attenuationLevelValuesSetCallCount = 0
    var attenuationLevelValues: [UInt8] = [UInt8]() { didSet { attenuationLevelValuesSetCallCount += 1 } }

    var daysSinceLastExposureLevelValuesSetCallCount = 0
    var daysSinceLastExposureLevelValues: [UInt8] = [UInt8]() { didSet { daysSinceLastExposureLevelValuesSetCallCount += 1 } }

    var durationLevelValuesSetCallCount = 0
    var durationLevelValues: [UInt8] = [UInt8]() { didSet { durationLevelValuesSetCallCount += 1 } }

    var transmissionRiskLevelValuesSetCallCount = 0
    var transmissionRiskLevelValues: [UInt8] = [UInt8]() { didSet { transmissionRiskLevelValuesSetCallCount += 1 } }

    var attenuationDurationThresholdsSetCallCount = 0
    var attenuationDurationThresholds: [Int] = [Int]() { didSet { attenuationDurationThresholdsSetCallCount += 1 } }
}

class HelpViewControllableMock: HelpViewControllable {
    init() {}
    init(router: HelpRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var helpDetailRequestsDismissalCallCount = 0
    var helpDetailRequestsDismissalHandler: ((Bool) -> ())?
    func helpDetailRequestsDismissal(shouldDismissViewController: Bool) {
        helpDetailRequestsDismissalCallCount += 1
        if let helpDetailRequestsDismissalHandler = helpDetailRequestsDismissalHandler {
            helpDetailRequestsDismissalHandler(shouldDismissViewController)
        }
    }

    var helpOverviewRequestsDismissalCallCount = 0
    var helpOverviewRequestsDismissalHandler: ((Bool) -> ())?
    func helpOverviewRequestsDismissal(shouldDismissViewController: Bool) {
        helpOverviewRequestsDismissalCallCount += 1
        if let helpOverviewRequestsDismissalHandler = helpOverviewRequestsDismissalHandler {
            helpOverviewRequestsDismissalHandler(shouldDismissViewController)
        }
    }

    var routerSetCallCount = 0
    var router: HelpRouting? { didSet { routerSetCallCount += 1 } }

    var helpDetailDidTapEnableAppButtonCallCount = 0
    var helpDetailDidTapEnableAppButtonHandler: (() -> ())?
    func helpDetailDidTapEnableAppButton() {
        helpDetailDidTapEnableAppButtonCallCount += 1
        if let helpDetailDidTapEnableAppButtonHandler = helpDetailDidTapEnableAppButtonHandler {
            helpDetailDidTapEnableAppButtonHandler()
        }
    }

    var pushCallCount = 0
    var pushHandler: ((ViewControllable, Bool) -> ())?
    func push(viewController: ViewControllable, animated: Bool) {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(viewController, animated)
        }
    }

    var helpOverviewRequestsRouteToCallCount = 0
    var helpOverviewRequestsRouteToHandler: ((HelpQuestion) -> ())?
    func helpOverviewRequestsRouteTo(question: HelpQuestion) {
        helpOverviewRequestsRouteToCallCount += 1
        if let helpOverviewRequestsRouteToHandler = helpOverviewRequestsRouteToHandler {
            helpOverviewRequestsRouteToHandler(question)
        }
    }

    var helpOverviewDidTapEnableAppButtonCallCount = 0
    var helpOverviewDidTapEnableAppButtonHandler: (() -> ())?
    func helpOverviewDidTapEnableAppButton() {
        helpOverviewDidTapEnableAppButtonCallCount += 1
        if let helpOverviewDidTapEnableAppButtonHandler = helpOverviewDidTapEnableAppButtonHandler {
            helpOverviewDidTapEnableAppButtonHandler()
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated)
        }
    }
}

class OnboardingViewControllableMock: OnboardingViewControllable {
    init() {}
    init(router: OnboardingRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var helpRequestsEnableAppCallCount = 0
    var helpRequestsEnableAppHandler: (() -> ())?
    func helpRequestsEnableApp() {
        helpRequestsEnableAppCallCount += 1
        if let helpRequestsEnableAppHandler = helpRequestsEnableAppHandler {
            helpRequestsEnableAppHandler()
        }
    }

    var helpRequestsDismissalCallCount = 0
    var helpRequestsDismissalHandler: ((Bool) -> ())?
    func helpRequestsDismissal(shouldHideViewController: Bool) {
        helpRequestsDismissalCallCount += 1
        if let helpRequestsDismissalHandler = helpRequestsDismissalHandler {
            helpRequestsDismissalHandler(shouldHideViewController)
        }
    }

    var routerSetCallCount = 0
    var router: OnboardingRouting? { didSet { routerSetCallCount += 1 } }

    var pushCallCount = 0
    var pushHandler: ((ViewControllable, Bool) -> ())?
    func push(viewController: ViewControllable, animated: Bool) {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(viewController, animated)
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete() {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
    }

    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose() {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex) {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
    }

    var nextStepAtIndexCallCount = 0
    var nextStepAtIndexHandler: ((Int) -> ())?
    func nextStepAtIndex(_ index: Int) {
        nextStepAtIndexCallCount += 1
        if let nextStepAtIndexHandler = nextStepAtIndexHandler {
            nextStepAtIndexHandler(index)
        }
    }

    var displayHelpCallCount = 0
    var displayHelpHandler: (() -> ())?
    func displayHelp() {
        displayHelpCallCount += 1
        if let displayHelpHandler = displayHelpHandler {
            displayHelpHandler()
        }
    }

    var displayShareAppCallCount = 0
    var displayShareAppHandler: ((@escaping (() -> ())) -> ())?
    func displayShareApp(completion: @escaping (() -> ())) {
        displayShareAppCallCount += 1
        if let displayShareAppHandler = displayShareAppHandler {
            displayShareAppHandler(completion)
        }
    }
}

class RoutingMock: Routing {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class SignatureValidatingMock: SignatureValidating {
    init() {}

    var validateCallCount = 0
    var validateHandler: ((Data, Data) -> (Bool))?
    func validate(signature: Data, content: Data) -> Bool {
        validateCallCount += 1
        if let validateHandler = validateHandler {
            return validateHandler(signature, content)
        }
        return false
    }
}

class ENManagingMock: ENManaging {
    init() {}
    init(exposureNotificationEnabled: Bool = false, exposureNotificationStatus: ENStatus) {
        self.exposureNotificationEnabled = exposureNotificationEnabled
        self._exposureNotificationStatus = exposureNotificationStatus
    }

    var activateCallCount = 0
    var activateHandler: ((@escaping ENErrorHandler) -> ())?
    func activate(completionHandler: @escaping ENErrorHandler) {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler(completionHandler)
        }
    }

    var invalidateCallCount = 0
    var invalidateHandler: (() -> ())?
    func invalidate() {
        invalidateCallCount += 1
        if let invalidateHandler = invalidateHandler {
            invalidateHandler()
        }
    }

    var detectExposuresCallCount = 0
    var detectExposuresHandler: ((ENExposureConfiguration, [URL], @escaping ENDetectExposuresHandler) -> (Progress))?
    func detectExposures(configuration: ENExposureConfiguration, diagnosisKeyURLs: [URL], completionHandler: @escaping ENDetectExposuresHandler) -> Progress {
        detectExposuresCallCount += 1
        if let detectExposuresHandler = detectExposuresHandler {
            return detectExposuresHandler(configuration, diagnosisKeyURLs, completionHandler)
        }
        fatalError("detectExposuresHandler returns can't have a default value thus its handler must be set")
    }

    var getDiagnosisKeysCallCount = 0
    var getDiagnosisKeysHandler: ((@escaping ENGetDiagnosisKeysHandler) -> ())?
    func getDiagnosisKeys(completionHandler: @escaping ENGetDiagnosisKeysHandler) {
        getDiagnosisKeysCallCount += 1
        if let getDiagnosisKeysHandler = getDiagnosisKeysHandler {
            getDiagnosisKeysHandler(completionHandler)
        }
    }

    var getTestDiagnosisKeysCallCount = 0
    var getTestDiagnosisKeysHandler: ((@escaping ENGetDiagnosisKeysHandler) -> ())?
    func getTestDiagnosisKeys(completionHandler: @escaping ENGetDiagnosisKeysHandler) {
        getTestDiagnosisKeysCallCount += 1
        if let getTestDiagnosisKeysHandler = getTestDiagnosisKeysHandler {
            getTestDiagnosisKeysHandler(completionHandler)
        }
    }

    var setExposureNotificationEnabledCallCount = 0
    var setExposureNotificationEnabledHandler: ((Bool, @escaping ENErrorHandler) -> ())?
    func setExposureNotificationEnabled(_ enabled: Bool, completionHandler: @escaping ENErrorHandler) {
        setExposureNotificationEnabledCallCount += 1
        if let setExposureNotificationEnabledHandler = setExposureNotificationEnabledHandler {
            setExposureNotificationEnabledHandler(enabled, completionHandler)
        }
    }

    var exposureNotificationEnabledSetCallCount = 0
    var exposureNotificationEnabled: Bool = false { didSet { exposureNotificationEnabledSetCallCount += 1 } }

    var exposureNotificationStatusSetCallCount = 0
    private var _exposureNotificationStatus: ENStatus! { didSet { exposureNotificationStatusSetCallCount += 1 } }
    var exposureNotificationStatus: ENStatus {
        get { return _exposureNotificationStatus }
        set { _exposureNotificationStatus = newValue }
    }

    var invalidationHandlerSetCallCount = 0
    var invalidationHandler: (() -> ())? { didSet { invalidationHandlerSetCallCount += 1 } }

    static var authorizationStatusSetCallCount = 0
    private static var _authorizationStatus: ENAuthorizationStatus! { didSet { authorizationStatusSetCallCount += 1 } }
    static var authorizationStatus: ENAuthorizationStatus {
        get { return _authorizationStatus }
        set { _authorizationStatus = newValue }
    }

    var getExposureInfoCallCount = 0
    var getExposureInfoHandler: ((ENExposureDetectionSummary, String, @escaping ENGetExposureInfoHandler) -> (Progress))?
    func getExposureInfo(summary: ENExposureDetectionSummary, userExplanation: String, completionHandler: @escaping ENGetExposureInfoHandler) -> Progress {
        getExposureInfoCallCount += 1
        if let getExposureInfoHandler = getExposureInfoHandler {
            return getExposureInfoHandler(summary, userExplanation, completionHandler)
        }
        fatalError("getExposureInfoHandler returns can't have a default value thus its handler must be set")
    }
}

class MainViewControllableMock: MainViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController(), router: MainRouting? = nil) {
        self.uiviewController = uiviewController
        self.router = router
    }

    var helpRequestsEnableAppCallCount = 0
    var helpRequestsEnableAppHandler: (() -> ())?
    func helpRequestsEnableApp() {
        helpRequestsEnableAppCallCount += 1
        if let helpRequestsEnableAppHandler = helpRequestsEnableAppHandler {
            helpRequestsEnableAppHandler()
        }
    }

    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool) {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
    }

    var messageWantsDismissalCallCount = 0
    var messageWantsDismissalHandler: ((Bool) -> ())?
    func messageWantsDismissal(shouldDismissViewController: Bool) {
        messageWantsDismissalCallCount += 1
        if let messageWantsDismissalHandler = messageWantsDismissalHandler {
            messageWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var infectedWantsDismissalCallCount = 0
    var infectedWantsDismissalHandler: ((Bool) -> ())?
    func infectedWantsDismissal(shouldDismissViewController: Bool) {
        infectedWantsDismissalCallCount += 1
        if let infectedWantsDismissalHandler = infectedWantsDismissalHandler {
            infectedWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var requestTestWantsDismissalCallCount = 0
    var requestTestWantsDismissalHandler: ((Bool) -> ())?
    func requestTestWantsDismissal(shouldDismissViewController: Bool) {
        requestTestWantsDismissalCallCount += 1
        if let requestTestWantsDismissalHandler = requestTestWantsDismissalHandler {
            requestTestWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var enableSettingRequestsDismissCallCount = 0
    var enableSettingRequestsDismissHandler: ((Bool) -> ())?
    func enableSettingRequestsDismiss(shouldDismissViewController: Bool) {
        enableSettingRequestsDismissCallCount += 1
        if let enableSettingRequestsDismissHandler = enableSettingRequestsDismissHandler {
            enableSettingRequestsDismissHandler(shouldDismissViewController)
        }
    }

    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action) {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
    }

    var receivedNotificationWantsDismissalCallCount = 0
    var receivedNotificationWantsDismissalHandler: ((Bool) -> ())?
    func receivedNotificationWantsDismissal(shouldDismissViewController: Bool) {
        receivedNotificationWantsDismissalCallCount += 1
        if let receivedNotificationWantsDismissalHandler = receivedNotificationWantsDismissalHandler {
            receivedNotificationWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var helpRequestsDismissalCallCount = 0
    var helpRequestsDismissalHandler: ((Bool) -> ())?
    func helpRequestsDismissal(shouldHideViewController: Bool) {
        helpRequestsDismissalCallCount += 1
        if let helpRequestsDismissalHandler = helpRequestsDismissalHandler {
            helpRequestsDismissalHandler(shouldHideViewController)
        }
    }

    var enableSettingDidTriggerActionCallCount = 0
    var enableSettingDidTriggerActionHandler: (() -> ())?
    func enableSettingDidTriggerAction() {
        enableSettingDidTriggerActionCallCount += 1
        if let enableSettingDidTriggerActionHandler = enableSettingDidTriggerActionHandler {
            enableSettingDidTriggerActionHandler()
        }
    }

    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout() {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification() {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected() {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var routerSetCallCount = 0
    var router: MainRouting? { didSet { routerSetCallCount += 1 } }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest() {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
    }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(stackedViewController: ViewControllable) {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(stackedViewController)
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool) -> ())?
    func present(viewController: ViewControllable, animated: Bool) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated)
        }
    }

    var presentViewControllerCallCount = 0
    var presentViewControllerHandler: ((ViewControllable, Bool, Bool) -> ())?
    func present(viewController: ViewControllable, animated: Bool, inNavigationController: Bool) {
        presentViewControllerCallCount += 1
        if let presentViewControllerHandler = presentViewControllerHandler {
            presentViewControllerHandler(viewController, animated, inNavigationController)
        }
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated)
        }
    }
}

class NetworkControllingMock: NetworkControlling {
    init() {}
    init(applicationManifest: AnyPublisher<ApplicationManifest, NetworkError>) {
        self._applicationManifest = applicationManifest
    }

    var applicationManifestSetCallCount = 0
    private var _applicationManifest: AnyPublisher<ApplicationManifest, NetworkError>! { didSet { applicationManifestSetCallCount += 1 } }
    var applicationManifest: AnyPublisher<ApplicationManifest, NetworkError> {
        get { return _applicationManifest }
        set { _applicationManifest = newValue }
    }

    var applicationConfigurationCallCount = 0
    var applicationConfigurationHandler: ((String) -> (AnyPublisher<ApplicationConfiguration, NetworkError>))?
    func applicationConfiguration(identifier: String) -> AnyPublisher<ApplicationConfiguration, NetworkError> {
        applicationConfigurationCallCount += 1
        if let applicationConfigurationHandler = applicationConfigurationHandler {
            return applicationConfigurationHandler(identifier)
        }
        fatalError("applicationConfigurationHandler returns can't have a default value thus its handler must be set")
    }

    var exposureRiskConfigurationParametersCallCount = 0
    var exposureRiskConfigurationParametersHandler: ((String) -> (AnyPublisher<ExposureRiskConfiguration, NetworkError>))?
    func exposureRiskConfigurationParameters(identifier: String) -> AnyPublisher<ExposureRiskConfiguration, NetworkError> {
        exposureRiskConfigurationParametersCallCount += 1
        if let exposureRiskConfigurationParametersHandler = exposureRiskConfigurationParametersHandler {
            return exposureRiskConfigurationParametersHandler(identifier)
        }
        fatalError("exposureRiskConfigurationParametersHandler returns can't have a default value thus its handler must be set")
    }

    var fetchExposureKeySetCallCount = 0
    var fetchExposureKeySetHandler: ((String) -> (AnyPublisher<(String, URL), NetworkError>))?
    func fetchExposureKeySet(identifier: String) -> AnyPublisher<(String, URL), NetworkError> {
        fetchExposureKeySetCallCount += 1
        if let fetchExposureKeySetHandler = fetchExposureKeySetHandler {
            return fetchExposureKeySetHandler(identifier)
        }
        fatalError("fetchExposureKeySetHandler returns can't have a default value thus its handler must be set")
    }

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: ((Padding) -> (AnyPublisher<LabConfirmationKey, NetworkError>))?
    func requestLabConfirmationKey(padding: Padding) -> AnyPublisher<LabConfirmationKey, NetworkError> {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            return requestLabConfirmationKeyHandler(padding)
        }
        fatalError("requestLabConfirmationKeyHandler returns can't have a default value thus its handler must be set")
    }

    var postKeysCallCount = 0
    var postKeysHandler: (([DiagnosisKey], LabConfirmationKey, Padding) -> (AnyPublisher<(), NetworkError>))?
    func postKeys(keys: [DiagnosisKey], labConfirmationKey: LabConfirmationKey, padding: Padding) -> AnyPublisher<(), NetworkError> {
        postKeysCallCount += 1
        if let postKeysHandler = postKeysHandler {
            return postKeysHandler(keys, labConfirmationKey, padding)
        }
        fatalError("postKeysHandler returns can't have a default value thus its handler must be set")
    }

    var stopKeysCallCount = 0
    var stopKeysHandler: ((Padding) -> (AnyPublisher<(), NetworkError>))?
    func stopKeys(padding: Padding) -> AnyPublisher<(), NetworkError> {
        stopKeysCallCount += 1
        if let stopKeysHandler = stopKeysHandler {
            return stopKeysHandler(padding)
        }
        fatalError("stopKeysHandler returns can't have a default value thus its handler must be set")
    }

    var startObservingNetworkReachabilityCallCount = 0
    var startObservingNetworkReachabilityHandler: (() -> ())?
    func startObservingNetworkReachability() {
        startObservingNetworkReachabilityCallCount += 1
        if let startObservingNetworkReachabilityHandler = startObservingNetworkReachabilityHandler {
            startObservingNetworkReachabilityHandler()
        }
    }

    var stopObservingNetworkReachabilityCallCount = 0
    var stopObservingNetworkReachabilityHandler: (() -> ())?
    func stopObservingNetworkReachability() {
        stopObservingNetworkReachabilityCallCount += 1
        if let stopObservingNetworkReachabilityHandler = stopObservingNetworkReachabilityHandler {
            stopObservingNetworkReachabilityHandler()
        }
    }
}

class NetworkStatusStreamingMock: NetworkStatusStreaming {
    init() {}
    init(currentStatus: Bool = false, networkStatusStream: AnyPublisher<Bool, Never>) {
        self.currentStatus = currentStatus
        self._networkStatusStream = networkStatusStream
    }

    var currentStatusSetCallCount = 0
    var currentStatus: Bool = false { didSet { currentStatusSetCallCount += 1 } }

    var networkStatusStreamSetCallCount = 0
    private var _networkStatusStream: AnyPublisher<Bool, Never>! { didSet { networkStatusStreamSetCallCount += 1 } }
    var networkStatusStream: AnyPublisher<Bool, Never> {
        get { return _networkStatusStream }
        set { _networkStatusStream = newValue }
    }
}

class OnboardingManagingMock: OnboardingManaging {
    init() {}
    init(onboardingSteps: [OnboardingStep] = [OnboardingStep]()) {
        self.onboardingSteps = onboardingSteps
    }

    var onboardingStepsSetCallCount = 0
    var onboardingSteps: [OnboardingStep] = [OnboardingStep]() { didSet { onboardingStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingStep?))?
    func getStep(_ index: Int) -> OnboardingStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }
}

class AboutListenerMock: AboutListener {
    init() {}

    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool) {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
    }
}

class CallGGDListenerMock: CallGGDListener {
    init() {}

    var callGGDWantsDismissalCallCount = 0
    var callGGDWantsDismissalHandler: ((Bool) -> ())?
    func callGGDWantsDismissal(shouldDismissViewController: Bool) {
        callGGDWantsDismissalCallCount += 1
        if let callGGDWantsDismissalHandler = callGGDWantsDismissalHandler {
            callGGDWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class EnableSettingListenerMock: EnableSettingListener {
    init() {}

    var enableSettingRequestsDismissCallCount = 0
    var enableSettingRequestsDismissHandler: ((Bool) -> ())?
    func enableSettingRequestsDismiss(shouldDismissViewController: Bool) {
        enableSettingRequestsDismissCallCount += 1
        if let enableSettingRequestsDismissHandler = enableSettingRequestsDismissHandler {
            enableSettingRequestsDismissHandler(shouldDismissViewController)
        }
    }

    var enableSettingDidTriggerActionCallCount = 0
    var enableSettingDidTriggerActionHandler: (() -> ())?
    func enableSettingDidTriggerAction() {
        enableSettingDidTriggerActionCallCount += 1
        if let enableSettingDidTriggerActionHandler = enableSettingDidTriggerActionHandler {
            enableSettingDidTriggerActionHandler()
        }
    }
}

class HelpDetailListenerMock: HelpDetailListener {
    init() {}

    var helpDetailRequestsDismissalCallCount = 0
    var helpDetailRequestsDismissalHandler: ((Bool) -> ())?
    func helpDetailRequestsDismissal(shouldDismissViewController: Bool) {
        helpDetailRequestsDismissalCallCount += 1
        if let helpDetailRequestsDismissalHandler = helpDetailRequestsDismissalHandler {
            helpDetailRequestsDismissalHandler(shouldDismissViewController)
        }
    }

    var helpDetailDidTapEnableAppButtonCallCount = 0
    var helpDetailDidTapEnableAppButtonHandler: (() -> ())?
    func helpDetailDidTapEnableAppButton() {
        helpDetailDidTapEnableAppButtonCallCount += 1
        if let helpDetailDidTapEnableAppButtonHandler = helpDetailDidTapEnableAppButtonHandler {
            helpDetailDidTapEnableAppButtonHandler()
        }
    }
}

class HelpListenerMock: HelpListener {
    init() {}

    var helpRequestsEnableAppCallCount = 0
    var helpRequestsEnableAppHandler: (() -> ())?
    func helpRequestsEnableApp() {
        helpRequestsEnableAppCallCount += 1
        if let helpRequestsEnableAppHandler = helpRequestsEnableAppHandler {
            helpRequestsEnableAppHandler()
        }
    }

    var helpRequestsDismissalCallCount = 0
    var helpRequestsDismissalHandler: ((Bool) -> ())?
    func helpRequestsDismissal(shouldHideViewController: Bool) {
        helpRequestsDismissalCallCount += 1
        if let helpRequestsDismissalHandler = helpRequestsDismissalHandler {
            helpRequestsDismissalHandler(shouldHideViewController)
        }
    }
}

class HelpOverviewListenerMock: HelpOverviewListener {
    init() {}

    var helpOverviewRequestsDismissalCallCount = 0
    var helpOverviewRequestsDismissalHandler: ((Bool) -> ())?
    func helpOverviewRequestsDismissal(shouldDismissViewController: Bool) {
        helpOverviewRequestsDismissalCallCount += 1
        if let helpOverviewRequestsDismissalHandler = helpOverviewRequestsDismissalHandler {
            helpOverviewRequestsDismissalHandler(shouldDismissViewController)
        }
    }

    var helpOverviewRequestsRouteToCallCount = 0
    var helpOverviewRequestsRouteToHandler: ((HelpQuestion) -> ())?
    func helpOverviewRequestsRouteTo(question: HelpQuestion) {
        helpOverviewRequestsRouteToCallCount += 1
        if let helpOverviewRequestsRouteToHandler = helpOverviewRequestsRouteToHandler {
            helpOverviewRequestsRouteToHandler(question)
        }
    }

    var helpOverviewDidTapEnableAppButtonCallCount = 0
    var helpOverviewDidTapEnableAppButtonHandler: (() -> ())?
    func helpOverviewDidTapEnableAppButton() {
        helpOverviewDidTapEnableAppButtonCallCount += 1
        if let helpOverviewDidTapEnableAppButtonHandler = helpOverviewDidTapEnableAppButtonHandler {
            helpOverviewDidTapEnableAppButtonHandler()
        }
    }
}

class InfectedListenerMock: InfectedListener {
    init() {}

    var infectedWantsDismissalCallCount = 0
    var infectedWantsDismissalHandler: ((Bool) -> ())?
    func infectedWantsDismissal(shouldDismissViewController: Bool) {
        infectedWantsDismissalCallCount += 1
        if let infectedWantsDismissalHandler = infectedWantsDismissalHandler {
            infectedWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class MainBuildableMock: MainBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (Routing))?
    func build() -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RoutingMock()
    }
}

class MessageListenerMock: MessageListener {
    init() {}

    var messageWantsDismissalCallCount = 0
    var messageWantsDismissalHandler: ((Bool) -> ())?
    func messageWantsDismissal(shouldDismissViewController: Bool) {
        messageWantsDismissalCallCount += 1
        if let messageWantsDismissalHandler = messageWantsDismissalHandler {
            messageWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class MoreInformationViewControllableMock: MoreInformationViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingConsentBuildableMock: OnboardingConsentBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingConsentListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingConsentListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class OnboardingListenerMock: OnboardingListener {
    init() {}

    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding() {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
    }
}

class OnboardingStepBuildableMock: OnboardingStepBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingStepListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingStepListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class ReceivedNotificationListenerMock: ReceivedNotificationListener {
    init() {}

    var receivedNotificationWantsDismissalCallCount = 0
    var receivedNotificationWantsDismissalHandler: ((Bool) -> ())?
    func receivedNotificationWantsDismissal(shouldDismissViewController: Bool) {
        receivedNotificationWantsDismissalCallCount += 1
        if let receivedNotificationWantsDismissalHandler = receivedNotificationWantsDismissalHandler {
            receivedNotificationWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class RequestTestListenerMock: RequestTestListener {
    init() {}

    var requestTestWantsDismissalCallCount = 0
    var requestTestWantsDismissalHandler: ((Bool) -> ())?
    func requestTestWantsDismissal(shouldDismissViewController: Bool) {
        requestTestWantsDismissalCallCount += 1
        if let requestTestWantsDismissalHandler = requestTestWantsDismissalHandler {
            requestTestWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class ThankYouListenerMock: ThankYouListener {
    init() {}

    var thankYouWantsDismissalCallCount = 0
    var thankYouWantsDismissalHandler: (() -> ())?
    func thankYouWantsDismissal() {
        thankYouWantsDismissalCallCount += 1
        if let thankYouWantsDismissalHandler = thankYouWantsDismissalHandler {
            thankYouWantsDismissalHandler()
        }
    }
}

class UpdateAppListenerMock: UpdateAppListener {
    init() {}
}

class BackgroundControllingMock: BackgroundControlling {
    init() {}

    var scheduleTasksCallCount = 0
    var scheduleTasksHandler: (() -> ())?
    func scheduleTasks() {
        scheduleTasksCallCount += 1
        if let scheduleTasksHandler = scheduleTasksHandler {
            scheduleTasksHandler()
        }
    }

    var handleCallCount = 0
    var handleHandler: ((BGTask) -> ())?
    func handle(task: BGTask) {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            handleHandler(task)
        }
    }
}

class UserNotificationCenterMock: UserNotificationCenter {
    init() {}

    var getAuthorizationStatusCallCount = 0
    var getAuthorizationStatusHandler: ((@escaping (UNAuthorizationStatus) -> ()) -> ())?
    func getAuthorizationStatus(completionHandler: @escaping (UNAuthorizationStatus) -> ()) {
        getAuthorizationStatusCallCount += 1
        if let getAuthorizationStatusHandler = getAuthorizationStatusHandler {
            getAuthorizationStatusHandler(completionHandler)
        }
    }

    var requestAuthorizationCallCount = 0
    var requestAuthorizationHandler: ((UNAuthorizationOptions, @escaping (Bool, Error?) -> ()) -> ())?
    func requestAuthorization(options: UNAuthorizationOptions, completionHandler: @escaping (Bool, Error?) -> ()) {
        requestAuthorizationCallCount += 1
        if let requestAuthorizationHandler = requestAuthorizationHandler {
            requestAuthorizationHandler(options, completionHandler)
        }
    }

    var addCallCount = 0
    var addHandler: ((UNNotificationRequest, ((Error?) -> ())?) -> ())?
    func add(_ request: UNNotificationRequest, withCompletionHandler completionHandler: ((Error?) -> ())?) {
        addCallCount += 1
        if let addHandler = addHandler {
            addHandler(request, completionHandler)
        }
    }
}

class HelpRoutingMock: HelpRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToOverviewCallCount = 0
    var routeToOverviewHandler: ((Bool) -> ())?
    func routeToOverview(shouldShowEnableAppButton: Bool) {
        routeToOverviewCallCount += 1
        if let routeToOverviewHandler = routeToOverviewHandler {
            routeToOverviewHandler(shouldShowEnableAppButton)
        }
    }

    var routeToCallCount = 0
    var routeToHandler: ((HelpQuestion, Bool) -> ())?
    func routeTo(question: HelpQuestion, shouldShowEnableAppButton: Bool) {
        routeToCallCount += 1
        if let routeToHandler = routeToHandler {
            routeToHandler(question, shouldShowEnableAppButton)
        }
    }

    var detachHelpOverviewCallCount = 0
    var detachHelpOverviewHandler: ((Bool) -> ())?
    func detachHelpOverview(shouldDismissViewController: Bool) {
        detachHelpOverviewCallCount += 1
        if let detachHelpOverviewHandler = detachHelpOverviewHandler {
            detachHelpOverviewHandler(shouldDismissViewController)
        }
    }

    var detachHelpDetailCallCount = 0
    var detachHelpDetailHandler: ((Bool) -> ())?
    func detachHelpDetail(shouldDismissViewController: Bool) {
        detachHelpDetailCallCount += 1
        if let detachHelpDetailHandler = detachHelpDetailHandler {
            detachHelpDetailHandler(shouldDismissViewController)
        }
    }
}

class OnboardingConsentViewControllableMock: OnboardingConsentViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class HelpManagingMock: HelpManaging {
    init() {}
    init(questions: [HelpQuestion] = [HelpQuestion]()) {
        self.questions = questions
    }

    var questionsSetCallCount = 0
    var questions: [HelpQuestion] = [HelpQuestion]() { didSet { questionsSetCallCount += 1 } }
}

class OnboardingConsentManagingMock: OnboardingConsentManaging {
    init() {}
    init(onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]()) {
        self.onboardingConsentSteps = onboardingConsentSteps
    }

    var onboardingConsentStepsSetCallCount = 0
    var onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]() { didSet { onboardingConsentStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingConsentStep?))?
    func getStep(_ index: Int) -> OnboardingConsentStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }

    var getNextConsentStepCallCount = 0
    var getNextConsentStepHandler: ((OnboardingConsentStepIndex, Bool, @escaping (OnboardingConsentStepIndex?) -> ()) -> ())?
    func getNextConsentStep(_ currentStep: OnboardingConsentStepIndex, skippedCurrentStep: Bool, completion: @escaping (OnboardingConsentStepIndex?) -> ()) {
        getNextConsentStepCallCount += 1
        if let getNextConsentStepHandler = getNextConsentStepHandler {
            getNextConsentStepHandler(currentStep, skippedCurrentStep, completion)
        }
    }

    var askEnableExposureNotificationsCallCount = 0
    var askEnableExposureNotificationsHandler: ((@escaping ((_ exposureActiveState: ExposureActiveState) -> ())) -> ())?
    func askEnableExposureNotifications(_ completion: @escaping ((_ exposureActiveState: ExposureActiveState) -> ())) {
        askEnableExposureNotificationsCallCount += 1
        if let askEnableExposureNotificationsHandler = askEnableExposureNotificationsHandler {
            askEnableExposureNotificationsHandler(completion)
        }
    }

    var goToBluetoothSettingsCallCount = 0
    var goToBluetoothSettingsHandler: ((@escaping (() -> ())) -> ())?
    func goToBluetoothSettings(_ completion: @escaping (() -> ())) {
        goToBluetoothSettingsCallCount += 1
        if let goToBluetoothSettingsHandler = goToBluetoothSettingsHandler {
            goToBluetoothSettingsHandler(completion)
        }
    }

    var askNotificationsAuthorizationCallCount = 0
    var askNotificationsAuthorizationHandler: ((@escaping (() -> ())) -> ())?
    func askNotificationsAuthorization(_ completion: @escaping (() -> ())) {
        askNotificationsAuthorizationCallCount += 1
        if let askNotificationsAuthorizationHandler = askNotificationsAuthorizationHandler {
            askNotificationsAuthorizationHandler(completion)
        }
    }

    var getAppStoreUrlCallCount = 0
    var getAppStoreUrlHandler: ((@escaping ((String?) -> ())) -> ())?
    func getAppStoreUrl(_ completion: @escaping ((String?) -> ())) {
        getAppStoreUrlCallCount += 1
        if let getAppStoreUrlHandler = getAppStoreUrlHandler {
            getAppStoreUrlHandler(completion)
        }
    }
}

class RequestTestViewControllableMock: RequestTestViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class AboutViewControllableMock: AboutViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class CardRoutingMock: CardRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeCallCount = 0
    var routeHandler: ((EnableSetting) -> ())?
    func route(to enableSetting: EnableSetting) {
        routeCallCount += 1
        if let routeHandler = routeHandler {
            routeHandler(enableSetting)
        }
    }

    var detachEnableSettingCallCount = 0
    var detachEnableSettingHandler: ((Bool) -> ())?
    func detachEnableSetting(hideViewController: Bool) {
        detachEnableSettingCallCount += 1
        if let detachEnableSettingHandler = detachEnableSettingHandler {
            detachEnableSettingHandler(hideViewController)
        }
    }
}

class OnboardingRoutingMock: OnboardingRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToStepsCallCount = 0
    var routeToStepsHandler: (() -> ())?
    func routeToSteps() {
        routeToStepsCallCount += 1
        if let routeToStepsHandler = routeToStepsHandler {
            routeToStepsHandler()
        }
    }

    var routeToStepCallCount = 0
    var routeToStepHandler: ((Int, Bool) -> ())?
    func routeToStep(withIndex index: Int, animated: Bool) {
        routeToStepCallCount += 1
        if let routeToStepHandler = routeToStepHandler {
            routeToStepHandler(index, animated)
        }
    }

    var routeToConsentCallCount = 0
    var routeToConsentHandler: ((Bool) -> ())?
    func routeToConsent(animated: Bool) {
        routeToConsentCallCount += 1
        if let routeToConsentHandler = routeToConsentHandler {
            routeToConsentHandler(animated)
        }
    }

    var routeToConsentWithIndexCallCount = 0
    var routeToConsentWithIndexHandler: ((Int, Bool) -> ())?
    func routeToConsent(withIndex index: Int, animated: Bool) {
        routeToConsentWithIndexCallCount += 1
        if let routeToConsentWithIndexHandler = routeToConsentWithIndexHandler {
            routeToConsentWithIndexHandler(index, animated)
        }
    }

    var routeToHelpCallCount = 0
    var routeToHelpHandler: (() -> ())?
    func routeToHelp() {
        routeToHelpCallCount += 1
        if let routeToHelpHandler = routeToHelpHandler {
            routeToHelpHandler()
        }
    }
}

class ShareSheetListenerMock: ShareSheetListener {
    init() {}

    var shareSheetDidCompleteCallCount = 0
    var shareSheetDidCompleteHandler: (() -> ())?
    func shareSheetDidComplete() {
        shareSheetDidCompleteCallCount += 1
        if let shareSheetDidCompleteHandler = shareSheetDidCompleteHandler {
            shareSheetDidCompleteHandler()
        }
    }
}

class ShareSheetViewControllableMock: ShareSheetViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class StatusListenerMock: StatusListener {
    init() {}

    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action) {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
    }
}

class WebViewingMock: WebViewing {
    init() {}
    init(uiview: UIView = UIView(frame: .zero)) {
        self.uiview = uiview
    }

    var uiviewSetCallCount = 0
    var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    var loadCallCount = 0
    var loadHandler: ((URLRequest) -> ())?
    func load(request: URLRequest) {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(request)
        }
    }
}

class WebListenerMock: WebListener {
    init() {}
}

class AppEntryPointMock: AppEntryPoint {
    init() {}
    init(uiviewController: UIViewController = UIViewController(), mutablePushNotificationStream: MutablePushNotificationStreaming = MutablePushNotificationStreamingMock()) {
        self.uiviewController = uiviewController
        self.mutablePushNotificationStream = mutablePushNotificationStream
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var mutablePushNotificationStreamSetCallCount = 0
    var mutablePushNotificationStream: MutablePushNotificationStreaming = MutablePushNotificationStreamingMock() { didSet { mutablePushNotificationStreamSetCallCount += 1 } }

    var startCallCount = 0
    var startHandler: (() -> ())?
    func start() {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
    }

    var didBecomeActiveCallCount = 0
    var didBecomeActiveHandler: (() -> ())?
    func didBecomeActive() {
        didBecomeActiveCallCount += 1
        if let didBecomeActiveHandler = didBecomeActiveHandler {
            didBecomeActiveHandler()
        }
    }

    var didEnterForegroundCallCount = 0
    var didEnterForegroundHandler: (() -> ())?
    func didEnterForeground() {
        didEnterForegroundCallCount += 1
        if let didEnterForegroundHandler = didEnterForegroundHandler {
            didEnterForegroundHandler()
        }
    }

    var didEnterBackgroundCallCount = 0
    var didEnterBackgroundHandler: (() -> ())?
    func didEnterBackground() {
        didEnterBackgroundCallCount += 1
        if let didEnterBackgroundHandler = didEnterBackgroundHandler {
            didEnterBackgroundHandler()
        }
    }

    var handleCallCount = 0
    var handleHandler: ((BGTask) -> ())?
    func handle(backgroundTask: BGTask) {
        handleCallCount += 1
        if let handleHandler = handleHandler {
            handleHandler(backgroundTask)
        }
    }
}

class ExposureControllingMock: ExposureControlling {
    init() {}

    var activateCallCount = 0
    var activateHandler: (() -> ())?
    func activate() {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
    }

    var getAppVersionInformationCallCount = 0
    var getAppVersionInformationHandler: ((@escaping (ExposureDataAppVersionInformation?) -> ()) -> ())?
    func getAppVersionInformation(_ completion: @escaping (ExposureDataAppVersionInformation?) -> ()) {
        getAppVersionInformationCallCount += 1
        if let getAppVersionInformationHandler = getAppVersionInformationHandler {
            getAppVersionInformationHandler(completion)
        }
    }

    var getAppRefreshIntervalCallCount = 0
    var getAppRefreshIntervalHandler: (() -> (AnyPublisher<Int, ExposureDataError>))?
    func getAppRefreshInterval() -> AnyPublisher<Int, ExposureDataError> {
        getAppRefreshIntervalCallCount += 1
        if let getAppRefreshIntervalHandler = getAppRefreshIntervalHandler {
            return getAppRefreshIntervalHandler()
        }
        fatalError("getAppRefreshIntervalHandler returns can't have a default value thus its handler must be set")
    }

    var getDecoyProbabilityCallCount = 0
    var getDecoyProbabilityHandler: (() -> (AnyPublisher<Float, ExposureDataError>))?
    func getDecoyProbability() -> AnyPublisher<Float, ExposureDataError> {
        getDecoyProbabilityCallCount += 1
        if let getDecoyProbabilityHandler = getDecoyProbabilityHandler {
            return getDecoyProbabilityHandler()
        }
        fatalError("getDecoyProbabilityHandler returns can't have a default value thus its handler must be set")
    }

    var getPaddingCallCount = 0
    var getPaddingHandler: (() -> (AnyPublisher<Padding, ExposureDataError>))?
    func getPadding() -> AnyPublisher<Padding, ExposureDataError> {
        getPaddingCallCount += 1
        if let getPaddingHandler = getPaddingHandler {
            return getPaddingHandler()
        }
        fatalError("getPaddingHandler returns can't have a default value thus its handler must be set")
    }

    var refreshStatusCallCount = 0
    var refreshStatusHandler: (() -> ())?
    func refreshStatus() {
        refreshStatusCallCount += 1
        if let refreshStatusHandler = refreshStatusHandler {
            refreshStatusHandler()
        }
    }

    var updateWhenRequiredCallCount = 0
    var updateWhenRequiredHandler: (() -> (AnyPublisher<(), ExposureDataError>))?
    func updateWhenRequired() -> AnyPublisher<(), ExposureDataError> {
        updateWhenRequiredCallCount += 1
        if let updateWhenRequiredHandler = updateWhenRequiredHandler {
            return updateWhenRequiredHandler()
        }
        fatalError("updateWhenRequiredHandler returns can't have a default value thus its handler must be set")
    }

    var processPendingUploadRequestsCallCount = 0
    var processPendingUploadRequestsHandler: (() -> (AnyPublisher<(), ExposureDataError>))?
    func processPendingUploadRequests() -> AnyPublisher<(), ExposureDataError> {
        processPendingUploadRequestsCallCount += 1
        if let processPendingUploadRequestsHandler = processPendingUploadRequestsHandler {
            return processPendingUploadRequestsHandler()
        }
        fatalError("processPendingUploadRequestsHandler returns can't have a default value thus its handler must be set")
    }

    var notifyUserIfRequiredCallCount = 0
    var notifyUserIfRequiredHandler: (() -> ())?
    func notifyUserIfRequired() {
        notifyUserIfRequiredCallCount += 1
        if let notifyUserIfRequiredHandler = notifyUserIfRequiredHandler {
            notifyUserIfRequiredHandler()
        }
    }

    var requestExposureNotificationPermissionCallCount = 0
    var requestExposureNotificationPermissionHandler: ((((ExposureManagerError?) -> ())?) -> ())?
    func requestExposureNotificationPermission(_ completion: ((ExposureManagerError?) -> ())?) {
        requestExposureNotificationPermissionCallCount += 1
        if let requestExposureNotificationPermissionHandler = requestExposureNotificationPermissionHandler {
            requestExposureNotificationPermissionHandler(completion)
        }
    }

    var requestPushNotificationPermissionCallCount = 0
    var requestPushNotificationPermissionHandler: ((@escaping () -> ()) -> ())?
    func requestPushNotificationPermission(_ completion: @escaping () -> ()) {
        requestPushNotificationPermissionCallCount += 1
        if let requestPushNotificationPermissionHandler = requestPushNotificationPermissionHandler {
            requestPushNotificationPermissionHandler(completion)
        }
    }

    var fetchAndProcessExposureKeySetsCallCount = 0
    var fetchAndProcessExposureKeySetsHandler: (() -> (AnyPublisher<(), ExposureDataError>))?
    func fetchAndProcessExposureKeySets() -> AnyPublisher<(), ExposureDataError> {
        fetchAndProcessExposureKeySetsCallCount += 1
        if let fetchAndProcessExposureKeySetsHandler = fetchAndProcessExposureKeySetsHandler {
            return fetchAndProcessExposureKeySetsHandler()
        }
        fatalError("fetchAndProcessExposureKeySetsHandler returns can't have a default value thus its handler must be set")
    }

    var confirmExposureNotificationCallCount = 0
    var confirmExposureNotificationHandler: (() -> ())?
    func confirmExposureNotification() {
        confirmExposureNotificationCallCount += 1
        if let confirmExposureNotificationHandler = confirmExposureNotificationHandler {
            confirmExposureNotificationHandler()
        }
    }

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: ((@escaping (_ result: Result<ExposureConfirmationKey, ExposureDataError>) -> ()) -> ())?
    func requestLabConfirmationKey(completion: @escaping (_ result: Result<ExposureConfirmationKey, ExposureDataError>) -> ()) {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            requestLabConfirmationKeyHandler(completion)
        }
    }

    var requestUploadKeysCallCount = 0
    var requestUploadKeysHandler: ((ExposureConfirmationKey, @escaping (_ result: ExposureControllerUploadKeysResult) -> ()) -> ())?
    func requestUploadKeys(forLabConfirmationKey labConfirmationKey: ExposureConfirmationKey, completion: @escaping (_ result: ExposureControllerUploadKeysResult) -> ()) {
        requestUploadKeysCallCount += 1
        if let requestUploadKeysHandler = requestUploadKeysHandler {
            requestUploadKeysHandler(labConfirmationKey, completion)
        }
    }
}

class InfectedRoutingMock: InfectedRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var didUploadCodesCallCount = 0
    var didUploadCodesHandler: ((ExposureConfirmationKey) -> ())?
    func didUploadCodes(withKey key: ExposureConfirmationKey) {
        didUploadCodesCallCount += 1
        if let didUploadCodesHandler = didUploadCodesHandler {
            didUploadCodesHandler(key)
        }
    }

    var infectedWantsDismissalCallCount = 0
    var infectedWantsDismissalHandler: ((Bool) -> ())?
    func infectedWantsDismissal(shouldDismissViewController: Bool) {
        infectedWantsDismissalCallCount += 1
        if let infectedWantsDismissalHandler = infectedWantsDismissalHandler {
            infectedWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var showInactiveCardCallCount = 0
    var showInactiveCardHandler: (() -> ())?
    func showInactiveCard() {
        showInactiveCardCallCount += 1
        if let showInactiveCardHandler = showInactiveCardHandler {
            showInactiveCardHandler()
        }
    }

    var removeInactiveCardCallCount = 0
    var removeInactiveCardHandler: (() -> ())?
    func removeInactiveCard() {
        removeInactiveCardCallCount += 1
        if let removeInactiveCardHandler = removeInactiveCardHandler {
            removeInactiveCardHandler()
        }
    }
}

class CallGGDViewControllableMock: CallGGDViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MessageViewControllableMock: MessageViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ReceivedNotificationViewControllableMock: ReceivedNotificationViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ThankYouViewControllableMock: ThankYouViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class UpdateAppViewControllableMock: UpdateAppViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class CryptoUtilityMock: CryptoUtility {
    init() {}

    var validateCallCount = 0
    var validateHandler: ((Data, Data, @escaping (Bool) -> ()) -> ())?
    func validate(data: Data, signature: Data, completion: @escaping (Bool) -> ()) {
        validateCallCount += 1
        if let validateHandler = validateHandler {
            validateHandler(data, signature, completion)
        }
    }

    var signatureCallCount = 0
    var signatureHandler: ((Data, Data) -> (Data))?
    func signature(forData data: Data, key: Data) -> Data {
        signatureCallCount += 1
        if let signatureHandler = signatureHandler {
            return signatureHandler(data, key)
        }
        fatalError("signatureHandler returns can't have a default value thus its handler must be set")
    }
}

class RootViewControllableMock: RootViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController(), router: RootRouting? = nil) {
        self.uiviewController = uiviewController
        self.router = router
    }

    var developerMenuRequestsOnboardingFlowCallCount = 0
    var developerMenuRequestsOnboardingFlowHandler: (() -> ())?
    func developerMenuRequestsOnboardingFlow() {
        developerMenuRequestsOnboardingFlowCallCount += 1
        if let developerMenuRequestsOnboardingFlowHandler = developerMenuRequestsOnboardingFlowHandler {
            developerMenuRequestsOnboardingFlowHandler()
        }
    }

    var callGGDWantsDismissalCallCount = 0
    var callGGDWantsDismissalHandler: ((Bool) -> ())?
    func callGGDWantsDismissal(shouldDismissViewController: Bool) {
        callGGDWantsDismissalCallCount += 1
        if let callGGDWantsDismissalHandler = callGGDWantsDismissalHandler {
            callGGDWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var messageWantsDismissalCallCount = 0
    var messageWantsDismissalHandler: ((Bool) -> ())?
    func messageWantsDismissal(shouldDismissViewController: Bool) {
        messageWantsDismissalCallCount += 1
        if let messageWantsDismissalHandler = messageWantsDismissalHandler {
            messageWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding() {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
    }

    var developerMenuRequestMessageCallCount = 0
    var developerMenuRequestMessageHandler: ((String, String) -> ())?
    func developerMenuRequestMessage(title: String, body: String) {
        developerMenuRequestMessageCallCount += 1
        if let developerMenuRequestMessageHandler = developerMenuRequestMessageHandler {
            developerMenuRequestMessageHandler(title, body)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var routerSetCallCount = 0
    var router: RootRouting? { didSet { routerSetCallCount += 1 } }

    var presentInNavigationControllerCallCount = 0
    var presentInNavigationControllerHandler: ((ViewControllable, Bool) -> ())?
    func presentInNavigationController(viewController: ViewControllable, animated: Bool) {
        presentInNavigationControllerCallCount += 1
        if let presentInNavigationControllerHandler = presentInNavigationControllerHandler {
            presentInNavigationControllerHandler(viewController, animated)
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
    }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(viewController: ViewControllable) {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(viewController)
        }
    }
}

class StatusRoutingMock: StatusRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class DeveloperMenuViewControllableMock: DeveloperMenuViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MainRoutingMock: MainRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var attachStatusCallCount = 0
    var attachStatusHandler: ((NSLayoutYAxisAnchor) -> ())?
    func attachStatus(topAnchor: NSLayoutYAxisAnchor) {
        attachStatusCallCount += 1
        if let attachStatusHandler = attachStatusHandler {
            attachStatusHandler(topAnchor)
        }
    }

    var attachMoreInformationCallCount = 0
    var attachMoreInformationHandler: (() -> ())?
    func attachMoreInformation() {
        attachMoreInformationCallCount += 1
        if let attachMoreInformationHandler = attachMoreInformationHandler {
            attachMoreInformationHandler()
        }
    }

    var routeToAboutAppCallCount = 0
    var routeToAboutAppHandler: (() -> ())?
    func routeToAboutApp() {
        routeToAboutAppCallCount += 1
        if let routeToAboutAppHandler = routeToAboutAppHandler {
            routeToAboutAppHandler()
        }
    }

    var detachAboutAppCallCount = 0
    var detachAboutAppHandler: ((Bool) -> ())?
    func detachAboutApp(shouldHideViewController: Bool) {
        detachAboutAppCallCount += 1
        if let detachAboutAppHandler = detachAboutAppHandler {
            detachAboutAppHandler(shouldHideViewController)
        }
    }

    var routeToReceivedNotificationCallCount = 0
    var routeToReceivedNotificationHandler: (() -> ())?
    func routeToReceivedNotification() {
        routeToReceivedNotificationCallCount += 1
        if let routeToReceivedNotificationHandler = routeToReceivedNotificationHandler {
            routeToReceivedNotificationHandler()
        }
    }

    var detachReceivedNotificationCallCount = 0
    var detachReceivedNotificationHandler: ((Bool) -> ())?
    func detachReceivedNotification(shouldDismissViewController: Bool) {
        detachReceivedNotificationCallCount += 1
        if let detachReceivedNotificationHandler = detachReceivedNotificationHandler {
            detachReceivedNotificationHandler(shouldDismissViewController)
        }
    }

    var routeToRequestTestCallCount = 0
    var routeToRequestTestHandler: (() -> ())?
    func routeToRequestTest() {
        routeToRequestTestCallCount += 1
        if let routeToRequestTestHandler = routeToRequestTestHandler {
            routeToRequestTestHandler()
        }
    }

    var detachRequestTestCallCount = 0
    var detachRequestTestHandler: ((Bool) -> ())?
    func detachRequestTest(shouldDismissViewController: Bool) {
        detachRequestTestCallCount += 1
        if let detachRequestTestHandler = detachRequestTestHandler {
            detachRequestTestHandler(shouldDismissViewController)
        }
    }

    var routeToInfectedCallCount = 0
    var routeToInfectedHandler: (() -> ())?
    func routeToInfected() {
        routeToInfectedCallCount += 1
        if let routeToInfectedHandler = routeToInfectedHandler {
            routeToInfectedHandler()
        }
    }

    var detachInfectedCallCount = 0
    var detachInfectedHandler: ((Bool) -> ())?
    func detachInfected(shouldDismissViewController: Bool) {
        detachInfectedCallCount += 1
        if let detachInfectedHandler = detachInfectedHandler {
            detachInfectedHandler(shouldDismissViewController)
        }
    }

    var routeToMessageCallCount = 0
    var routeToMessageHandler: ((String, String) -> ())?
    func routeToMessage(title: String, body: String) {
        routeToMessageCallCount += 1
        if let routeToMessageHandler = routeToMessageHandler {
            routeToMessageHandler(title, body)
        }
    }

    var detachMessageCallCount = 0
    var detachMessageHandler: ((Bool) -> ())?
    func detachMessage(shouldDismissViewController: Bool) {
        detachMessageCallCount += 1
        if let detachMessageHandler = detachMessageHandler {
            detachMessageHandler(shouldDismissViewController)
        }
    }

    var routeToEnableSettingCallCount = 0
    var routeToEnableSettingHandler: ((EnableSetting) -> ())?
    func routeToEnableSetting(_ setting: EnableSetting) {
        routeToEnableSettingCallCount += 1
        if let routeToEnableSettingHandler = routeToEnableSettingHandler {
            routeToEnableSettingHandler(setting)
        }
    }

    var detachEnableSettingCallCount = 0
    var detachEnableSettingHandler: ((Bool) -> ())?
    func detachEnableSetting(shouldDismissViewController: Bool) {
        detachEnableSettingCallCount += 1
        if let detachEnableSettingHandler = detachEnableSettingHandler {
            detachEnableSettingHandler(shouldDismissViewController)
        }
    }
}

class UpdateAppBuildableMock: UpdateAppBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((UpdateAppListener, String?, String?) -> (ViewControllable))?
    func build(withListener listener: UpdateAppListener, appStoreURL: String?, minimumVersionMessage: String?) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, appStoreURL, minimumVersionMessage)
        }
        return ViewControllableMock()
    }
}

class WebBuildableMock: WebBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((WebListener, URLRequest) -> (ViewControllable))?
    func build(withListener listener: WebListener, urlRequest: URLRequest) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, urlRequest)
        }
        return ViewControllableMock()
    }
}

class MoreInformationListenerMock: MoreInformationListener {
    init() {}

    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout() {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification() {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected() {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
    }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest() {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
    }
}

class ThankYouBuildableMock: ThankYouBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((ThankYouListener, ExposureConfirmationKey) -> (ViewControllable))?
    func build(withListener listener: ThankYouListener, exposureConfirmationKey: ExposureConfirmationKey) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, exposureConfirmationKey)
        }
        return ViewControllableMock()
    }
}

class OnboardingBuildableMock: OnboardingBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingListener) -> (Routing))?
    func build(withListener listener: OnboardingListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class WebViewControllableMock: WebViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class CallGGDBuildableMock: CallGGDBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((CallGGDListener) -> (ViewControllable))?
    func build(withListener listener: CallGGDListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class MessageBuildableMock: MessageBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((MessageListener, String, String) -> (ViewControllable))?
    func build(withListener listener: MessageListener, title: String, body: String) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, title, body)
        }
        return ViewControllableMock()
    }
}

class InfectedBuildableMock: InfectedBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((InfectedListener) -> (Routing))?
    func build(withListener listener: InfectedListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class ExposureDataOperationProviderMock: ExposureDataOperationProvider {
    init() {}
    init(requestManifestOperation: RequestAppManifestDataOperation) {
        self._requestManifestOperation = requestManifestOperation
    }

    var processExposureKeySetsOperationCallCount = 0
    var processExposureKeySetsOperationHandler: ((ExposureManaging, ExposureConfiguration) -> (ProcessExposureKeySetsDataOperation?))?
    func processExposureKeySetsOperation(exposureManager: ExposureManaging, configuration: ExposureConfiguration) -> ProcessExposureKeySetsDataOperation? {
        processExposureKeySetsOperationCallCount += 1
        if let processExposureKeySetsOperationHandler = processExposureKeySetsOperationHandler {
            return processExposureKeySetsOperationHandler(exposureManager, configuration)
        }
        return nil
    }

    var processPendingLabConfirmationUploadRequestsOperationCallCount = 0
    var processPendingLabConfirmationUploadRequestsOperationHandler: ((Padding) -> (ProcessPendingLabConfirmationUploadRequestsDataOperation))?
    func processPendingLabConfirmationUploadRequestsOperation(padding: Padding) -> ProcessPendingLabConfirmationUploadRequestsDataOperation {
        processPendingLabConfirmationUploadRequestsOperationCallCount += 1
        if let processPendingLabConfirmationUploadRequestsOperationHandler = processPendingLabConfirmationUploadRequestsOperationHandler {
            return processPendingLabConfirmationUploadRequestsOperationHandler(padding)
        }
        fatalError("processPendingLabConfirmationUploadRequestsOperationHandler returns can't have a default value thus its handler must be set")
    }

    var requestAppConfigurationOperationCallCount = 0
    var requestAppConfigurationOperationHandler: ((String) -> (RequestAppConfigurationDataOperation))?
    func requestAppConfigurationOperation(identifier: String) -> RequestAppConfigurationDataOperation {
        requestAppConfigurationOperationCallCount += 1
        if let requestAppConfigurationOperationHandler = requestAppConfigurationOperationHandler {
            return requestAppConfigurationOperationHandler(identifier)
        }
        fatalError("requestAppConfigurationOperationHandler returns can't have a default value thus its handler must be set")
    }

    var requestExposureConfigurationOperationCallCount = 0
    var requestExposureConfigurationOperationHandler: ((String) -> (RequestExposureConfigurationDataOperation))?
    func requestExposureConfigurationOperation(identifier: String) -> RequestExposureConfigurationDataOperation {
        requestExposureConfigurationOperationCallCount += 1
        if let requestExposureConfigurationOperationHandler = requestExposureConfigurationOperationHandler {
            return requestExposureConfigurationOperationHandler(identifier)
        }
        fatalError("requestExposureConfigurationOperationHandler returns can't have a default value thus its handler must be set")
    }

    var requestExposureKeySetsOperationCallCount = 0
    var requestExposureKeySetsOperationHandler: (([String]) -> (RequestExposureKeySetsDataOperation))?
    func requestExposureKeySetsOperation(identifiers: [String]) -> RequestExposureKeySetsDataOperation {
        requestExposureKeySetsOperationCallCount += 1
        if let requestExposureKeySetsOperationHandler = requestExposureKeySetsOperationHandler {
            return requestExposureKeySetsOperationHandler(identifiers)
        }
        fatalError("requestExposureKeySetsOperationHandler returns can't have a default value thus its handler must be set")
    }

    var requestManifestOperationSetCallCount = 0
    private var _requestManifestOperation: RequestAppManifestDataOperation! { didSet { requestManifestOperationSetCallCount += 1 } }
    var requestManifestOperation: RequestAppManifestDataOperation {
        get { return _requestManifestOperation }
        set { _requestManifestOperation = newValue }
    }

    var requestLabConfirmationKeyOperationCallCount = 0
    var requestLabConfirmationKeyOperationHandler: ((Padding) -> (RequestLabConfirmationKeyDataOperation))?
    func requestLabConfirmationKeyOperation(padding: Padding) -> RequestLabConfirmationKeyDataOperation {
        requestLabConfirmationKeyOperationCallCount += 1
        if let requestLabConfirmationKeyOperationHandler = requestLabConfirmationKeyOperationHandler {
            return requestLabConfirmationKeyOperationHandler(padding)
        }
        fatalError("requestLabConfirmationKeyOperationHandler returns can't have a default value thus its handler must be set")
    }

    var uploadDiagnosisKeysOperationCallCount = 0
    var uploadDiagnosisKeysOperationHandler: (([DiagnosisKey], LabConfirmationKey, Padding) -> (UploadDiagnosisKeysDataOperation))?
    func uploadDiagnosisKeysOperation(diagnosisKeys: [DiagnosisKey], labConfirmationKey: LabConfirmationKey, padding: Padding) -> UploadDiagnosisKeysDataOperation {
        uploadDiagnosisKeysOperationCallCount += 1
        if let uploadDiagnosisKeysOperationHandler = uploadDiagnosisKeysOperationHandler {
            return uploadDiagnosisKeysOperationHandler(diagnosisKeys, labConfirmationKey, padding)
        }
        fatalError("uploadDiagnosisKeysOperationHandler returns can't have a default value thus its handler must be set")
    }
}

class RequestTestBuildableMock: RequestTestBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((RequestTestListener) -> (ViewControllable))?
    func build(withListener listener: RequestTestListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class StatusBuildableMock: StatusBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((StatusListener, NSLayoutYAxisAnchor?) -> (Routing))?
    func build(withListener listener: StatusListener, topAnchor: NSLayoutYAxisAnchor?) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, topAnchor)
        }
        return RoutingMock()
    }
}

class MutableNetworkStatusStreamingMock: MutableNetworkStatusStreaming {
    init() {}
    init(currentStatus: Bool = false, networkStatusStream: AnyPublisher<Bool, Never>) {
        self.currentStatus = currentStatus
        self._networkStatusStream = networkStatusStream
    }

    var currentStatusSetCallCount = 0
    var currentStatus: Bool = false { didSet { currentStatusSetCallCount += 1 } }

    var networkStatusStreamSetCallCount = 0
    private var _networkStatusStream: AnyPublisher<Bool, Never>! { didSet { networkStatusStreamSetCallCount += 1 } }
    var networkStatusStream: AnyPublisher<Bool, Never> {
        get { return _networkStatusStream }
        set { _networkStatusStream = newValue }
    }

    var updateCallCount = 0
    var updateHandler: ((Bool) -> ())?
    func update(isReachable: Bool) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(isReachable)
        }
    }
}

class ReceivedNotificationBuildableMock: ReceivedNotificationBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((ReceivedNotificationListener) -> (ViewControllable))?
    func build(withListener listener: ReceivedNotificationListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class HelpBuildableMock: HelpBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((HelpListener, Bool) -> (Routing))?
    func build(withListener listener: HelpListener, shouldShowEnableAppButton: Bool) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, shouldShowEnableAppButton)
        }
        return RoutingMock()
    }
}

class DeveloperMenuBuildableMock: DeveloperMenuBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((DeveloperMenuListener) -> (ViewControllable))?
    func build(listener: DeveloperMenuListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class ShareSheetBuildableMock: ShareSheetBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((ShareSheetListener, [Any]) -> (ViewControllable))?
    func build(withListener listener: ShareSheetListener, items: [Any]) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, items)
        }
        return ViewControllableMock()
    }
}

class AboutBuildableMock: AboutBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((AboutListener) -> (ViewControllable))?
    func build(withListener listener: AboutListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class CardBuildableMock: CardBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((CardType) -> (Routing & CardTypeSettable))?
    func build(type: CardType) -> Routing & CardTypeSettable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(type)
        }
        fatalError("buildHandler returns can't have a default value thus its handler must be set")
    }
}

class NetworkManagingMock: NetworkManaging {
    init() {}

    var getManifestCallCount = 0
    var getManifestHandler: ((@escaping (Result<Manifest, NetworkError>) -> ()) -> ())?
    func getManifest(completion: @escaping (Result<Manifest, NetworkError>) -> ()) {
        getManifestCallCount += 1
        if let getManifestHandler = getManifestHandler {
            getManifestHandler(completion)
        }
    }

    var getAppConfigCallCount = 0
    var getAppConfigHandler: ((String, @escaping (Result<AppConfig, NetworkError>) -> ()) -> ())?
    func getAppConfig(appConfig: String, completion: @escaping (Result<AppConfig, NetworkError>) -> ()) {
        getAppConfigCallCount += 1
        if let getAppConfigHandler = getAppConfigHandler {
            getAppConfigHandler(appConfig, completion)
        }
    }

    var getRiskCalculationParametersCallCount = 0
    var getRiskCalculationParametersHandler: ((String, @escaping (Result<RiskCalculationParameters, NetworkError>) -> ()) -> ())?
    func getRiskCalculationParameters(identifier: String, completion: @escaping (Result<RiskCalculationParameters, NetworkError>) -> ()) {
        getRiskCalculationParametersCallCount += 1
        if let getRiskCalculationParametersHandler = getRiskCalculationParametersHandler {
            getRiskCalculationParametersHandler(identifier, completion)
        }
    }

    var getExposureKeySetCallCount = 0
    var getExposureKeySetHandler: ((String, @escaping (Result<URL, NetworkError>) -> ()) -> ())?
    func getExposureKeySet(identifier: String, completion: @escaping (Result<URL, NetworkError>) -> ()) {
        getExposureKeySetCallCount += 1
        if let getExposureKeySetHandler = getExposureKeySetHandler {
            getExposureKeySetHandler(identifier, completion)
        }
    }

    var postRegisterCallCount = 0
    var postRegisterHandler: ((RegisterRequest, @escaping (Result<LabInformation, NetworkError>) -> ()) -> ())?
    func postRegister(request: RegisterRequest, completion: @escaping (Result<LabInformation, NetworkError>) -> ()) {
        postRegisterCallCount += 1
        if let postRegisterHandler = postRegisterHandler {
            postRegisterHandler(request, completion)
        }
    }

    var postKeysCallCount = 0
    var postKeysHandler: ((PostKeysRequest, String, @escaping (NetworkError?) -> ()) -> ())?
    func postKeys(request: PostKeysRequest, signature: String, completion: @escaping (NetworkError?) -> ()) {
        postKeysCallCount += 1
        if let postKeysHandler = postKeysHandler {
            postKeysHandler(request, signature, completion)
        }
    }

    var postStopKeysCallCount = 0
    var postStopKeysHandler: ((PostKeysRequest, String, @escaping (NetworkError?) -> ()) -> ())?
    func postStopKeys(request: PostKeysRequest, signature: String, completion: @escaping (NetworkError?) -> ()) {
        postStopKeysCallCount += 1
        if let postStopKeysHandler = postStopKeysHandler {
            postStopKeysHandler(request, signature, completion)
        }
    }
}

class BackgroundControllerBuildableMock: BackgroundControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (BackgroundControlling))?
    func build() -> BackgroundControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return BackgroundControllingMock()
    }
}

class MoreInformationBuildableMock: MoreInformationBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((MoreInformationListener) -> (MoreInformationViewControllable))?
    func build(withListener listener: MoreInformationListener) -> MoreInformationViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return MoreInformationViewControllableMock()
    }
}

class PushNotificationStreamingMock: PushNotificationStreaming {
    init() {}
    init(pushNotificationStream: AnyPublisher<UNNotificationResponse, Never>) {
        self._pushNotificationStream = pushNotificationStream
    }

    var pushNotificationStreamSetCallCount = 0
    private var _pushNotificationStream: AnyPublisher<UNNotificationResponse, Never>! { didSet { pushNotificationStreamSetCallCount += 1 } }
    var pushNotificationStream: AnyPublisher<UNNotificationResponse, Never> {
        get { return _pushNotificationStream }
        set { _pushNotificationStream = newValue }
    }
}

class ExposureDataControllingMock: ExposureDataControlling {
    init() {}
    init(lastExposure: ExposureReport? = nil, lastSuccessfulFetchDate: Date = Date(), lastLocalNotificationExposureDate: Date? = nil) {
        self.lastExposure = lastExposure
        self.lastSuccessfulFetchDate = lastSuccessfulFetchDate
        self.lastLocalNotificationExposureDate = lastLocalNotificationExposureDate
    }

    var lastExposureSetCallCount = 0
    var lastExposure: ExposureReport? { didSet { lastExposureSetCallCount += 1 } }

    var lastSuccessfulFetchDateSetCallCount = 0
    var lastSuccessfulFetchDate: Date = Date() { didSet { lastSuccessfulFetchDateSetCallCount += 1 } }

    var lastLocalNotificationExposureDateSetCallCount = 0
    var lastLocalNotificationExposureDate: Date? { didSet { lastLocalNotificationExposureDateSetCallCount += 1 } }

    var removeLastExposureCallCount = 0
    var removeLastExposureHandler: (() -> (AnyPublisher<(), Never>))?
    func removeLastExposure() -> AnyPublisher<(), Never> {
        removeLastExposureCallCount += 1
        if let removeLastExposureHandler = removeLastExposureHandler {
            return removeLastExposureHandler()
        }
        fatalError("removeLastExposureHandler returns can't have a default value thus its handler must be set")
    }

    var fetchAndProcessExposureKeySetsCallCount = 0
    var fetchAndProcessExposureKeySetsHandler: ((ExposureManaging) -> (AnyPublisher<(), ExposureDataError>))?
    func fetchAndProcessExposureKeySets(exposureManager: ExposureManaging) -> AnyPublisher<(), ExposureDataError> {
        fetchAndProcessExposureKeySetsCallCount += 1
        if let fetchAndProcessExposureKeySetsHandler = fetchAndProcessExposureKeySetsHandler {
            return fetchAndProcessExposureKeySetsHandler(exposureManager)
        }
        fatalError("fetchAndProcessExposureKeySetsHandler returns can't have a default value thus its handler must be set")
    }

    var processPendingUploadRequestsCallCount = 0
    var processPendingUploadRequestsHandler: (() -> (AnyPublisher<(), ExposureDataError>))?
    func processPendingUploadRequests() -> AnyPublisher<(), ExposureDataError> {
        processPendingUploadRequestsCallCount += 1
        if let processPendingUploadRequestsHandler = processPendingUploadRequestsHandler {
            return processPendingUploadRequestsHandler()
        }
        fatalError("processPendingUploadRequestsHandler returns can't have a default value thus its handler must be set")
    }

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: (() -> (AnyPublisher<LabConfirmationKey, ExposureDataError>))?
    func requestLabConfirmationKey() -> AnyPublisher<LabConfirmationKey, ExposureDataError> {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            return requestLabConfirmationKeyHandler()
        }
        fatalError("requestLabConfirmationKeyHandler returns can't have a default value thus its handler must be set")
    }

    var uploadCallCount = 0
    var uploadHandler: (([DiagnosisKey], LabConfirmationKey) -> (AnyPublisher<(), ExposureDataError>))?
    func upload(diagnosisKeys: [DiagnosisKey], labConfirmationKey: LabConfirmationKey) -> AnyPublisher<(), ExposureDataError> {
        uploadCallCount += 1
        if let uploadHandler = uploadHandler {
            return uploadHandler(diagnosisKeys, labConfirmationKey)
        }
        fatalError("uploadHandler returns can't have a default value thus its handler must be set")
    }

    var getAppVersionInformationCallCount = 0
    var getAppVersionInformationHandler: (() -> (AnyPublisher<ExposureDataAppVersionInformation?, ExposureDataError>))?
    func getAppVersionInformation() -> AnyPublisher<ExposureDataAppVersionInformation?, ExposureDataError> {
        getAppVersionInformationCallCount += 1
        if let getAppVersionInformationHandler = getAppVersionInformationHandler {
            return getAppVersionInformationHandler()
        }
        fatalError("getAppVersionInformationHandler returns can't have a default value thus its handler must be set")
    }

    var getAppRefreshIntervalCallCount = 0
    var getAppRefreshIntervalHandler: (() -> (AnyPublisher<Int, ExposureDataError>))?
    func getAppRefreshInterval() -> AnyPublisher<Int, ExposureDataError> {
        getAppRefreshIntervalCallCount += 1
        if let getAppRefreshIntervalHandler = getAppRefreshIntervalHandler {
            return getAppRefreshIntervalHandler()
        }
        fatalError("getAppRefreshIntervalHandler returns can't have a default value thus its handler must be set")
    }

    var getDecoyProbabilityCallCount = 0
    var getDecoyProbabilityHandler: (() -> (AnyPublisher<Float, ExposureDataError>))?
    func getDecoyProbability() -> AnyPublisher<Float, ExposureDataError> {
        getDecoyProbabilityCallCount += 1
        if let getDecoyProbabilityHandler = getDecoyProbabilityHandler {
            return getDecoyProbabilityHandler()
        }
        fatalError("getDecoyProbabilityHandler returns can't have a default value thus its handler must be set")
    }

    var getPaddingCallCount = 0
    var getPaddingHandler: (() -> (AnyPublisher<Padding, ExposureDataError>))?
    func getPadding() -> AnyPublisher<Padding, ExposureDataError> {
        getPaddingCallCount += 1
        if let getPaddingHandler = getPaddingHandler {
            return getPaddingHandler()
        }
        fatalError("getPaddingHandler returns can't have a default value thus its handler must be set")
    }

    var updateLastLocalNotificationExposureDateCallCount = 0
    var updateLastLocalNotificationExposureDateHandler: ((Date) -> ())?
    func updateLastLocalNotificationExposureDate(_ date: Date) {
        updateLastLocalNotificationExposureDateCallCount += 1
        if let updateLastLocalNotificationExposureDateHandler = updateLastLocalNotificationExposureDateHandler {
            updateLastLocalNotificationExposureDateHandler(date)
        }
    }
}

class OnboardingStepListenerMock: OnboardingStepListener {
    init() {}

    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete() {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
    }

    var nextStepAtIndexCallCount = 0
    var nextStepAtIndexHandler: ((Int) -> ())?
    func nextStepAtIndex(_ index: Int) {
        nextStepAtIndexCallCount += 1
        if let nextStepAtIndexHandler = nextStepAtIndexHandler {
            nextStepAtIndexHandler(index)
        }
    }
}

class OnboardingConsentListenerMock: OnboardingConsentListener {
    init() {}

    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose() {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex) {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
    }

    var displayHelpCallCount = 0
    var displayHelpHandler: (() -> ())?
    func displayHelp() {
        displayHelpCallCount += 1
        if let displayHelpHandler = displayHelpHandler {
            displayHelpHandler()
        }
    }

    var displayShareAppCallCount = 0
    var displayShareAppHandler: ((@escaping (() -> ())) -> ())?
    func displayShareApp(completion: @escaping (() -> ())) {
        displayShareAppCallCount += 1
        if let displayShareAppHandler = displayShareAppHandler {
            displayShareAppHandler(completion)
        }
    }
}

class EnableSettingBuildableMock: EnableSettingBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((EnableSettingListener, EnableSetting) -> (ViewControllable))?
    func build(withListener listener: EnableSettingListener, setting: EnableSetting) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, setting)
        }
        return ViewControllableMock()
    }
}

class MutablePushNotificationStreamingMock: MutablePushNotificationStreaming {
    init() {}
    init(pushNotificationStream: AnyPublisher<UNNotificationResponse, Never>) {
        self._pushNotificationStream = pushNotificationStream
    }

    var pushNotificationStreamSetCallCount = 0
    private var _pushNotificationStream: AnyPublisher<UNNotificationResponse, Never>! { didSet { pushNotificationStreamSetCallCount += 1 } }
    var pushNotificationStream: AnyPublisher<UNNotificationResponse, Never> {
        get { return _pushNotificationStream }
        set { _pushNotificationStream = newValue }
    }

    var updateCallCount = 0
    var updateHandler: ((UNNotificationResponse) -> ())?
    func update(response: UNNotificationResponse) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(response)
        }
    }
}

class NetworkResponseHandlerProviderBuildableMock: NetworkResponseHandlerProviderBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (NetworkResponseHandlerProvider))?
    func build() -> NetworkResponseHandlerProvider {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        fatalError("buildHandler returns can't have a default value thus its handler must be set")
    }
}

class ExposureManagingMock: ExposureManaging {
    init() {}

    var activateCallCount = 0
    var activateHandler: ((@escaping (ExposureManagerStatus) -> ()) -> ())?
    func activate(completion: @escaping (ExposureManagerStatus) -> ()) {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler(completion)
        }
    }

    var detectExposuresCallCount = 0
    var detectExposuresHandler: ((ExposureConfiguration, [URL], @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> ()) -> ())?
    func detectExposures(configuration: ExposureConfiguration, diagnosisKeyURLs: [URL], completion: @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> ()) {
        detectExposuresCallCount += 1
        if let detectExposuresHandler = detectExposuresHandler {
            detectExposuresHandler(configuration, diagnosisKeyURLs, completion)
        }
    }

    var getDiagnonisKeysCallCount = 0
    var getDiagnonisKeysHandler: ((@escaping (Result<[DiagnosisKey], ExposureManagerError>) -> ()) -> ())?
    func getDiagnonisKeys(completion: @escaping (Result<[DiagnosisKey], ExposureManagerError>) -> ()) {
        getDiagnonisKeysCallCount += 1
        if let getDiagnonisKeysHandler = getDiagnonisKeysHandler {
            getDiagnonisKeysHandler(completion)
        }
    }

    var setExposureNotificationEnabledCallCount = 0
    var setExposureNotificationEnabledHandler: ((Bool, @escaping (Result<(), ExposureManagerError>) -> ()) -> ())?
    func setExposureNotificationEnabled(_ enabled: Bool, completion: @escaping (Result<(), ExposureManagerError>) -> ()) {
        setExposureNotificationEnabledCallCount += 1
        if let setExposureNotificationEnabledHandler = setExposureNotificationEnabledHandler {
            setExposureNotificationEnabledHandler(enabled, completion)
        }
    }

    var isExposureNotificationEnabledCallCount = 0
    var isExposureNotificationEnabledHandler: (() -> (Bool))?
    func isExposureNotificationEnabled() -> Bool {
        isExposureNotificationEnabledCallCount += 1
        if let isExposureNotificationEnabledHandler = isExposureNotificationEnabledHandler {
            return isExposureNotificationEnabledHandler()
        }
        return false
    }

    var getExposureNotificationStatusCallCount = 0
    var getExposureNotificationStatusHandler: (() -> (ExposureManagerStatus))?
    func getExposureNotificationStatus() -> ExposureManagerStatus {
        getExposureNotificationStatusCallCount += 1
        if let getExposureNotificationStatusHandler = getExposureNotificationStatusHandler {
            return getExposureNotificationStatusHandler()
        }
        fatalError("getExposureNotificationStatusHandler returns can't have a default value thus its handler must be set")
    }

    var getExposureInfoCallCount = 0
    var getExposureInfoHandler: ((ExposureDetectionSummary, String, @escaping ([ExposureInformation]?, ExposureManagerError?) -> ()) -> ())?
    func getExposureInfo(summary: ExposureDetectionSummary, userExplanation: String, completionHandler: @escaping ([ExposureInformation]?, ExposureManagerError?) -> ()) {
        getExposureInfoCallCount += 1
        if let getExposureInfoHandler = getExposureInfoHandler {
            getExposureInfoHandler(summary, userExplanation, completionHandler)
        }
    }
}

class ExposureStateStreamingMock: ExposureStateStreaming {
    init() {}
    init(exposureState: AnyPublisher<ExposureState, Never>, currentExposureState: ExposureState? = nil) {
        self._exposureState = exposureState
        self.currentExposureState = currentExposureState
    }

    var exposureStateSetCallCount = 0
    private var _exposureState: AnyPublisher<ExposureState, Never>! { didSet { exposureStateSetCallCount += 1 } }
    var exposureState: AnyPublisher<ExposureState, Never> {
        get { return _exposureState }
        set { _exposureState = newValue }
    }

    var currentExposureStateSetCallCount = 0
    var currentExposureState: ExposureState? { didSet { currentExposureStateSetCallCount += 1 } }
}

class NetworkControllerBuildableMock: NetworkControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (NetworkControlling))?
    func build() -> NetworkControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return NetworkControllingMock()
    }
}

class StorageControllingMock: StorageControlling {
    init() {}

    var storeCallCount = 0
    var storeHandler: ((Data, Any, @escaping (StoreError?) -> ()) -> ())?
    func store<Key: StoreKey>(data: Data, identifiedBy key: Key, completion: @escaping (StoreError?) -> ()) {
        storeCallCount += 1
        if let storeHandler = storeHandler {
            storeHandler(data, key, completion)
        }
    }

    var retrieveDataCallCount = 0
    var retrieveDataHandler: ((Any) -> (Data?))?
    func retrieveData<Key: StoreKey>(identifiedBy key: Key) -> Data? {
        retrieveDataCallCount += 1
        if let retrieveDataHandler = retrieveDataHandler {
            return retrieveDataHandler(key)
        }
        return nil
    }

    var removeDataCallCount = 0
    var removeDataHandler: ((Any, @escaping (StoreError?) -> ()) -> ())?
    func removeData<Key: StoreKey>(for key: Key, completion: @escaping (StoreError?) -> ()) {
        removeDataCallCount += 1
        if let removeDataHandler = removeDataHandler {
            removeDataHandler(key, completion)
        }
    }

    var requestExclusiveAccessCallCount = 0
    var requestExclusiveAccessHandler: ((@escaping (StorageControlling) -> ()) -> ())?
    func requestExclusiveAccess(_ work: @escaping (StorageControlling) -> ()) {
        requestExclusiveAccessCallCount += 1
        if let requestExclusiveAccessHandler = requestExclusiveAccessHandler {
            requestExclusiveAccessHandler(work)
        }
    }
}

class NetworkManagerBuildableMock: NetworkManagerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (NetworkManaging))?
    func build() -> NetworkManaging {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return NetworkManagingMock()
    }
}

class MutableExposureStateStreamingMock: MutableExposureStateStreaming {
    init() {}
    init(exposureState: AnyPublisher<ExposureState, Never>, currentExposureState: ExposureState? = nil) {
        self._exposureState = exposureState
        self.currentExposureState = currentExposureState
    }

    var exposureStateSetCallCount = 0
    private var _exposureState: AnyPublisher<ExposureState, Never>! { didSet { exposureStateSetCallCount += 1 } }
    var exposureState: AnyPublisher<ExposureState, Never> {
        get { return _exposureState }
        set { _exposureState = newValue }
    }

    var currentExposureStateSetCallCount = 0
    var currentExposureState: ExposureState? { didSet { currentExposureStateSetCallCount += 1 } }

    var updateCallCount = 0
    var updateHandler: ((ExposureState) -> ())?
    func update(state: ExposureState) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(state)
        }
    }
}

class StorageControllerBuildableMock: StorageControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (StorageControlling))?
    func build() -> StorageControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return StorageControllingMock()
    }
}

class ExposureManagerBuildableMock: ExposureManagerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (ExposureManaging))?
    func build() -> ExposureManaging {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ExposureManagingMock()
    }
}

class ExposureControllerBuildableMock: ExposureControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (ExposureControlling))?
    func build() -> ExposureControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ExposureControllingMock()
    }
}

class RootBuildableMock: RootBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (AppEntryPoint))?
    func build() -> AppEntryPoint {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return AppEntryPointMock()
    }
}
